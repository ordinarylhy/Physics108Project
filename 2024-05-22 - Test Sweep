############################################################################
### 2024-05-22 - Test Sweep Algorithm W/O Magnet
############################################################################

'''
(*) In this script, we set up a test loop to collect voltage
measurements. We integrate our tempetature control capabilities with our 
data collection and lock-in control scripts. Does not consider B-field yet. 
(*) Need to do: 
1. t_temp: time needed for temperature to callibrate 
2. lockin_temp parameters: parameters used to init the lock-in for temp measurements
3. get_temp(): function to get tempetature 
4. add value of lockin_ref_V: based on outer resistor, need to confirm its value; JMB will do this
'''



### IMPORT RELEVANT PACKAGES

import numpy as np 
import time
from time import sleep
import qcodes as qc
from qcodes.dataset import do0d, load_or_create_experiment
from qcodes.instrument import Instrument
from qcodes.instrument_drivers.stanford_research import SR830
from qcodes.validators import Numbers
from qcodes_contrib_drivers.drivers.Lakeshore.Model_625 import Lakeshore625



### SET-UP LOCK-IN FOR MEASURING

# LOCK-IN PARAMS 
lockin_GPI = ...
lockin_sensivity = 1e-6 # order of uV
lockin_ref_freq = 23 # stay at ~100 Hz, prime number
lockin_ref_V = ... # ! 
lockin_ref_phi = 0
lockin_tc = 0.1 # larger than 1 / (lock-in ref. frequency)
lockin_calib_time = 3 * lockin_tc # calibration time is ~3 * (time constant)

# CONNECT TO LOCK-IN
lockin_measure = SR830('lockin', 'GPIB0::' + str(lockin_GPI) + '::INSTR') 
lockin_measure.print_readable_snapshot() # check lock-in status

# SET LOCK-IN PARAMS
lockin_measure.time_constant(lockin_tc)
lockin_measure.sensitivity(lockin_sensitivity)
lockin_measure.reference_source('internal')
lockin_measure.set('amplitude', lockin_ref_V) # set reference amp
lockin_measure.set('frequency', lockin_ref_freq)
lockin_measure.set('phase', lockin_ref_phi) 
lockin_measure.print_readable_snapshot() # check updated params



### SET-UP LOCK-IN FOR TEMPERATURE CONTROL

# LOCK-IN PARAMS 
lockin_temp_GPI = ...
lockin_temp_sensivity = ...
lockin_temp_ref_freq = ...
lockin_temp_ref_V = ...  
lockin_temp_ref_phi = ...
lockin_temp_tc = ...
lockin_temp_calib_time = ...

# CONNECT TO LOCK-IN
lockin_temp = SR830('lockin', 'GPIB0::' + str(lockin_temp_GPI) + '::INSTR') 
lockin_temp.print_readable_snapshot() # check lock-in status

# SET LOCK-IN PARAMS
lockin_temp.time_constant(lockin_temp_tc)
lockin_temp.sensitivity(lockin_temp_sensitivity)
lockin_temp.reference_source('internal')
lockin_temp.set('amplitude', lockin_temp_ref_V) # set reference amp
lockin_temp.set('frequency', lockin_temp_ref_freq)
lockin_temp.set('phase', lockin_temp_ref_phi) 
lockin_temp.print_readable_snapshot() # check updated params



### DO SWEEP 

# SET-UP SWEEP
temp_min, temp_max, temp_points = 1, 10, 100 # ! examples, need to determine  
B_min, B_max, B_points = 1e-5, 5, 200 
temps = np.linspace(temp_min, temp_max, temp_points)
Bs = np.linspace(B_min, B_max, B_points)
i = 0
N = 10 

# RUN SWEEP 
for T in temps: 
    set_temperature(temp = T, big_resistor = 1e6, lockin = lockin_temp, DC_source = None, v_goal = 0.002, chart, tolerance = 0.1)
    time.sleep(t_temp) # ! wait for temperature to calibrate 
    dat = []
    for B in Bs:
        # Set up field measurement
        t_field = 1
        # Wait for instruments to callibrate 
        time.sleep(t_field) 
        time.sleep(lockin_calib_time)
        # Extract data points 
        V, B, T, magnet_current = lockin_measure.R(), B, get_temp(), B / N # ! add temp
        print('V, B, T, magnet current')
        print(V, B, T, magnet_current) # print current status 
        dat.append(np.array([V, B, T, magnet_current]))
    dat = np.array(dat)
    np.save('sweep_' + str(i) + '.npy', dat)
    i += 1

